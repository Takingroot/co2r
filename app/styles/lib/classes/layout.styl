@import "../functions/helpers"

//
//  Layout
//  ------------------------------------------------------------------

.table
  display table

.table-cell
  display table-cell
  vertical-align top

.inline-block
  display inline-block
  vertical-align top

.group
  position relative

.jar
  @extends .table
  @extends .group





.row
  > *
    @extends .inline-block
  > .align-right
    float right
  // if we want equal column heights then each child
  &.row-couple-heights
    display table
    // xxx does 100% cause problems?
    width 100%
    > *
      // ...must be a cell
      @extends .table-cell


//
//  Fluid
//  ------------------------------------------------------------------

//
//  .v-gutters
//  ------------------------------------------------------------------

generate_gutter_classes(grid_units)

  grid_units_class_name = decimal_to_class_name(grid_units)

  .gutters-{grid_units_class_name} > *
  .v-gutters-{grid_units_class_name} > *
    margin-bottom gd(grid_units)

  .gutters-{grid_units_class_name} > *
  .h-gutters-{grid_units_class_name} > *:not(:last-child)
    margin-right gd(grid_units)

  .v-push-{grid_units_class_name}
    margin-top gd(grid_units)

  .h-push-{grid_units_class_name}
    margin-left cols(grid_units)!important


generate_gutter_classes(i) for i in 0.25 0.5 0.75
generate_gutter_classes(i) for i in 1..5


.frame > [class*="col"] + [class*="col"]
  padding-left gd(1)

[class*="col"]
  display inline-block
  & + [class*="col"]
    margin-left gd(1)
    vertical-align top


.float-right
  float right

.span
  width 100%
for n in 1..14
  .span-{n}
  .col-{n}
    width cols(n)


//
//  Alignment
//  ------------------------------------------------------------------

// to align something the container must wrap the contents
// we can automate the wrapping by applying it
// when trying to align
//
// we have to account for the case when used with .row
// because then the display:table ruins .row's inline flow
// and given rows aleady make children wrap so all that must be done
// is :not() apply these rules in .row cases
//
.align-center
.align-right
.aligns-right:not(.row) > *
.aligns-center:not(.row) > *
  display table

/*
xxx
.no-not-selector [class*="aligns-"].row > *
  display inline-table
*/



.aligns-center > *
.align-center
  margin-left auto
  margin-right auto

.aligns-right > *
.align-right
  margin-left auto!important

.aligns-middle > *
.align-middle
  vertical-align middle

.aligns-bottom > *
.align-bottom
  vertical-align bottom!important

.text-aligns-center > *
.text-align-center
  text-align center
