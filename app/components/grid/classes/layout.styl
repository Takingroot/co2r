


//
//  Layout
//  ------------------------------------------------------------------

.table
  display table

.table-cell
  display table-cell
  vertical-align top

.inline-block
  display inline-block
  vertical-align top

.group
  position relative

// make an element's width match its content width
.jar
  display table
  position relative








//
//  .v-gutters
//  ------------------------------------------------------------------

generateGutterClasses(n)

  className = decimalToClassName(n)

  .gutters-{className} > *
  .v-gutters-{className} > *
    margin-bottom gd(n)

  .gutters-{className} > *
  .h-gutters-{className} > *:not(:last-child)
    margin-right gd(n)

  .v-push-{className}
    margin-top gd(n)

  .h-push-{className}
    margin-left cols(n)!important


generateGutterClasses(i) for i in 0.25 0.5 0.75
generateGutterClasses(i) for i in 1..5


.frame > [class*="col-"] + [class*="col-"]
  padding-left gd(1)

[class*="col-"]
  display inline-block
  & + [class*="col-"]
    margin-left gd(1)
    vertical-align top


.v-span
  height 100%
.span
  width 100%




//
//  Alignment
//  ------------------------------------------------------------------

// to align something the container must wrap the contents
// we can automate the wrapping by applying it
// when trying to align
//
// we have to account for the case when used with .row
// because then the display:table ruins .row's inline flow
// and given rows aleady make children wrap so all that must be done
// is :not() apply these rules in .row cases
//
.align-center
.align-right
.aligns-right:not(.row) > *
.aligns-center:not(.row) > *
  display table

/*
xxx
.no-not-selector [class*="aligns-"].row > *
  display inline-table
*/



.text-aligns-center > *
.text-align-center
  text-align center
