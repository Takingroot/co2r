// Generated by CoffeeScript 1.3.3
(function() {
  var StaticJadeCompiler, color, extend, fileWriter, fromJade2Html, fs, getHtmlFilePath, growl, isFileToCompile, jade, loadPackages, logError, mkdirp, sysPath,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jade = require('jade');

  sysPath = require('path');

  mkdirp = require('mkdirp');

  fs = require('fs');

  color = require("ansi-color").set;

  growl = require('growl');

  fromJade2Html = function(jadeFilePath, config, callback) {
    try {
      return fs.readFile(jadeFilePath, function(err, data) {
        var content, foo, res, _ref, _ref1;
        content = jade.compile(data, {
          compileDebug: false,
          filename: jadeFilePath,
          pretty: !!((_ref = config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.pretty : void 0 : void 0)
        });
        foo = function() {};
        res = content(foo);
        return callback(err, res);
      });
    } catch (err) {
      return callback(err);
    }
  };

  getHtmlFilePath = function(jadeFilePath, publicPath) {
    var newpath, relativeFilePath;
    relativeFilePath = jadeFilePath.split(sysPath.sep);
    relativeFilePath.push(relativeFilePath.pop().slice(0, -5) + ".html");
    relativeFilePath.splice(1, 0, "assets");
    newpath = sysPath.join.apply(this, relativeFilePath);
    return newpath;
  };

  logError = function(err, title) {
    if (!(title != null)) {
      title = 'Brunch jade error';
    }
    if (err != null) {
      console.log(color(err, "red"));
      return growl(err, {
        title: title
      });
    }
  };

  fileWriter = function(newFilePath) {
    return function(err, content) {
      var dirname;
      if (err != null) {
        throw err;
      }
      if (!(content != null)) {
        return;
      }
      dirname = sysPath.dirname(newFilePath);
      return mkdirp(dirname, '0775', function(err) {
        if (err != null) {
          throw err;
        }
        return fs.writeFile(newFilePath, content, function(err) {
          if (err != null) {
            throw err;
          }
        });
      });
    };
  };

  isFileToCompile = function(filePath) {
    var fileName;
    fileName = (filePath.split(sysPath.sep)).pop();
    return /^(?!_).+\.jade/.test(fileName);
  };

  extend = function(object, properties) {
    Object.keys(properties).forEach(function(key) {
      return object[key] = properties[key];
    });
    return object;
  };

  loadPackages = function(rootPath, callback) {
    var nodeModules;
    rootPath = sysPath.resolve(rootPath);
    nodeModules = "" + rootPath + "/node_modules";
    return fs.readFile(sysPath.join(rootPath, 'package.json'), function(error, data) {
      var deps, json, plugins, _ref;
      if (error != null) {
        return callback(error);
      }
      json = JSON.parse(data);
      deps = Object.keys(extend((_ref = json.devDependencies) != null ? _ref : {}, json.dependencies));
      try {
        plugins = deps.map(function(dependency) {
          return require("" + nodeModules + "/" + dependency);
        });
      } catch (err) {
        error = err;
      }
      return callback(error, plugins);
    });
  };

  module.exports = StaticJadeCompiler = (function() {

    StaticJadeCompiler.prototype.brunchPlugin = true;

    StaticJadeCompiler.prototype.type = 'template';

    StaticJadeCompiler.prototype.extension = 'jade';

    function StaticJadeCompiler(config) {
      this.config = config;
      loadPackages(process.cwd(), function(error, packages) {
        var errmsg, p;
        if (error != null) {
          throw error;
        }
        if (__indexOf.call((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = packages.length; _i < _len; _i++) {
            p = packages[_i];
            _results.push(p.name);
          }
          return _results;
        })(), "JadeCompiler") < 0) {
          error = "`jade-brunch` plugin needed by `static-jade-brunch` \ndoesn't seems to be present.";
          logError(error, 'Brunch plugin error');
          errmsg = "* Check that package.json contain the `jade-brunch` plugin\n* Check that it is correctly installed by using `npm list`";
          console.log(color(errmsg, "red"));
          throw error;
        }
      });
    }

    StaticJadeCompiler.prototype.onCompile = function(changedFiles) {
      var config;
      config = this.config;
      return changedFiles.every(function(file) {
        var f, filesToCompile, jadeFileName, newFilePath, publicPath, _i, _len, _results;
        filesToCompile = (function() {
          var _i, _len, _ref, _results;
          _ref = file.sourceFiles;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if (isFileToCompile(f.path)) {
              _results.push(f.path);
            }
          }
          return _results;
        })();
        publicPath = config.paths["public"];
        _results = [];
        for (_i = 0, _len = filesToCompile.length; _i < _len; _i++) {
          jadeFileName = filesToCompile[_i];
          newFilePath = getHtmlFilePath(jadeFileName, publicPath);
          try {
            _results.push(fromJade2Html(jadeFileName, config, fileWriter(newFilePath)));
          } catch (err) {
            logError(err);
            _results.push(null);
          }
        }
        return _results;
      });
    };

    return StaticJadeCompiler;

  })();

}).call(this);
